//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeUI.EmployeeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeDetail", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class EmployeeDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpPhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpId {
            get {
                return this.EmpIdField;
            }
            set {
                if ((this.EmpIdField.Equals(value) != true)) {
                    this.EmpIdField = value;
                    this.RaisePropertyChanged("EmpId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpMail {
            get {
                return this.EmpMailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpMailField, value) != true)) {
                    this.EmpMailField = value;
                    this.RaisePropertyChanged("EmpMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpName {
            get {
                return this.EmpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpNameField, value) != true)) {
                    this.EmpNameField = value;
                    this.RaisePropertyChanged("EmpName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpPhone {
            get {
                return this.EmpPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpPhoneField, value) != true)) {
                    this.EmpPhoneField = value;
                    this.RaisePropertyChanged("EmpPhone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int empIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string empPhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int empId {
            get {
                return this.empIdField;
            }
            set {
                if ((this.empIdField.Equals(value) != true)) {
                    this.empIdField = value;
                    this.RaisePropertyChanged("empId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empMail {
            get {
                return this.empMailField;
            }
            set {
                if ((object.ReferenceEquals(this.empMailField, value) != true)) {
                    this.empMailField = value;
                    this.RaisePropertyChanged("empMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empName {
            get {
                return this.empNameField;
            }
            set {
                if ((object.ReferenceEquals(this.empNameField, value) != true)) {
                    this.empNameField = value;
                    this.RaisePropertyChanged("empName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string empPhone {
            get {
                return this.empPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.empPhoneField, value) != true)) {
                    this.empPhoneField = value;
                    this.RaisePropertyChanged("empPhone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmployeeService.IEmpService")]
    public interface IEmpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllEmp", ReplyAction="http://tempuri.org/IEmpService/GetAllEmpResponse")]
        EmployeeUI.EmployeeService.EmployeeDetail[] GetAllEmp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllEmp", ReplyAction="http://tempuri.org/IEmpService/GetAllEmpResponse")]
        System.Threading.Tasks.Task<EmployeeUI.EmployeeService.EmployeeDetail[]> GetAllEmpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllUserById", ReplyAction="http://tempuri.org/IEmpService/GetAllUserByIdResponse")]
        EmployeeUI.EmployeeService.EmployeeDetail GetAllUserById(int empId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllUserById", ReplyAction="http://tempuri.org/IEmpService/GetAllUserByIdResponse")]
        System.Threading.Tasks.Task<EmployeeUI.EmployeeService.EmployeeDetail> GetAllUserByIdAsync(int empId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/AddEmp", ReplyAction="http://tempuri.org/IEmpService/AddEmpResponse")]
        int AddEmp(EmployeeUI.EmployeeService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/AddEmp", ReplyAction="http://tempuri.org/IEmpService/AddEmpResponse")]
        System.Threading.Tasks.Task<int> AddEmpAsync(EmployeeUI.EmployeeService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/UpdateEmp", ReplyAction="http://tempuri.org/IEmpService/UpdateEmpResponse")]
        int UpdateEmp(EmployeeUI.EmployeeService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/UpdateEmp", ReplyAction="http://tempuri.org/IEmpService/UpdateEmpResponse")]
        System.Threading.Tasks.Task<int> UpdateEmpAsync(EmployeeUI.EmployeeService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DeleteEmp", ReplyAction="http://tempuri.org/IEmpService/DeleteEmpResponse")]
        int DeleteEmp(int empid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DeleteEmp", ReplyAction="http://tempuri.org/IEmpService/DeleteEmpResponse")]
        System.Threading.Tasks.Task<int> DeleteEmpAsync(int empid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmpServiceChannel : EmployeeUI.EmployeeService.IEmpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmpServiceClient : System.ServiceModel.ClientBase<EmployeeUI.EmployeeService.IEmpService>, EmployeeUI.EmployeeService.IEmpService {
        
        public EmpServiceClient() {
        }
        
        public EmpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmployeeUI.EmployeeService.EmployeeDetail[] GetAllEmp() {
            return base.Channel.GetAllEmp();
        }
        
        public System.Threading.Tasks.Task<EmployeeUI.EmployeeService.EmployeeDetail[]> GetAllEmpAsync() {
            return base.Channel.GetAllEmpAsync();
        }
        
        public EmployeeUI.EmployeeService.EmployeeDetail GetAllUserById(int empId) {
            return base.Channel.GetAllUserById(empId);
        }
        
        public System.Threading.Tasks.Task<EmployeeUI.EmployeeService.EmployeeDetail> GetAllUserByIdAsync(int empId) {
            return base.Channel.GetAllUserByIdAsync(empId);
        }
        
        public int AddEmp(EmployeeUI.EmployeeService.Employee emp) {
            return base.Channel.AddEmp(emp);
        }
        
        public System.Threading.Tasks.Task<int> AddEmpAsync(EmployeeUI.EmployeeService.Employee emp) {
            return base.Channel.AddEmpAsync(emp);
        }
        
        public int UpdateEmp(EmployeeUI.EmployeeService.Employee emp) {
            return base.Channel.UpdateEmp(emp);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEmpAsync(EmployeeUI.EmployeeService.Employee emp) {
            return base.Channel.UpdateEmpAsync(emp);
        }
        
        public int DeleteEmp(int empid) {
            return base.Channel.DeleteEmp(empid);
        }
        
        public System.Threading.Tasks.Task<int> DeleteEmpAsync(int empid) {
            return base.Channel.DeleteEmpAsync(empid);
        }
    }
}
